import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.impute import SimpleImputer
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Load dataset
data = pd.read_csv('D:\\Users\\James Corbett\\Downloads\\world-happiness-report\\world-happiness-report.csv')

# Define features and target
features = ['Log GDP per capita', 'Social support', 'Healthy life expectancy at birth', 'Freedom to make life choices', 'Generosity', 'Perceptions of corruption', 'Positive affect', 'Negative affect']
X = data[features]
y = data['Life Ladder']

# Impute missing values
imputer = SimpleImputer(strategy='mean')
X_imputed = imputer.fit_transform(X)

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.2, random_state=42)

# Train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Advanced Data Visualization with Enhanced Styling
plt.figure(figsize=(10, 6))
sns.set(style="whitegrid")

# Creating a color map based on 'Life Ladder' scores
colors = np.where(y_test - y_pred < 0, 'red', 'green')

plt.scatter(y_test, y_pred, alpha=0.7, c=colors, label='Predicted vs Actual')
plt.plot(y_test, y_test, color='blue', linewidth=2, label='Ideal Prediction Line')

# Enhance axis labels
plt.xlabel('Actual Life Ladder Score', fontsize=12, fontweight='bold')
plt.ylabel('Predicted Life Ladder Score', fontsize=12, fontweight='bold')
plt.title('Actual vs Predicted Life Ladder Scores with Linear Regression', fontsize=14)

plt.legend()
plt.show()

