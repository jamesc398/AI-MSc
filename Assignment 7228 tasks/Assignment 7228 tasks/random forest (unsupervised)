import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_squared_error
from math import sqrt

# Load the dataset
file_path = 'D:\\Users\\James Corbett\\Downloads\\world-happiness-report\\world-happiness-report.csv'
data = pd.read_csv(file_path)

# Selecting features for clustering
features = ['Log GDP per capita', 'Social support', 'Healthy life expectancy at birth', 
            'Freedom to make life choices', 'Generosity', 'Perceptions of corruption']

# Imputation of missing values
imputer = SimpleImputer(strategy='mean')
data[features] = imputer.fit_transform(data[features])

# Clustering
# Preprocessing
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data[features])

# Applying K-Means Clustering
kmeans = KMeans(n_clusters=3, random_state=42)  # Adjust the number of clusters as needed
clusters = kmeans.fit_predict(scaled_data)

# Adding cluster information to the DataFrame
data['Cluster'] = clusters

# Professional-looking scatter plot with centroids
sns.set_style("whitegrid")
plt.figure(figsize=(12, 8))
sns.scatterplot(x=scaled_data[:, 0], y=scaled_data[:, 1], hue=data['Cluster'], palette='viridis', s=100, alpha=0.6)
centroids = kmeans.cluster_centers_
sns.scatterplot(x=centroids[:, 0], y=centroids[:, 1], s=300, color='red', marker='X', label='Centroids')
plt.title('Clusters of Countries based on Happiness Factors with Centroids', fontsize=16)
plt.xlabel('Log GDP per capita (scaled)', fontsize=14)
plt.ylabel('Social support (scaled)', fontsize=14)
plt.legend(title='Legend', title_fontsize='13', loc='best', fontsize='12')
plt.show()

# Correlation Heatmap
correlation_matrix = data[features].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix of Happiness Factors', fontsize=16)
plt.show()

# Random Forest Regression
# Using Life Ladder as the target variable
y = data['Life Ladder']  # Assuming 'Life Ladder' is the target variable

# Splitting the dataset
#8203;``【oaicite:0】``&#8203;
